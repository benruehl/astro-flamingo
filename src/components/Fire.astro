---
interface Props {
    class?: string;
    animationDelay?: string;
}

const { class: className, animationDelay = "0s" } = Astro.props;
---

<div class="fire" class:list={["fire", className]}>
    {[...Array(25).keys()].map(() => (
        <div class="burn heat"></div>
        <div class="burn"></div>
    ))}
</div>

<style lang="scss" define:vars={{animationDelay}}>
    $fireSize: 220;
    $burnSize: 60;
    $burnCount: 25;

    .fire {
        position: relative;
        width: #{$fireSize}px;
        height: #{$fireSize}px;
        filter: blur(20px) contrast(3);
        mix-blend-mode: difference;
        transform: translate3d(0,0,0);

        &::before {
            content: "";
            position: absolute;
            display: inline-block;
            width: #{$fireSize}px;
            aspect-ratio: 1;
            border-image: radial-gradient(rgb(var(--accent-alt)) 69%, #0000 70%) 84.5%/50%;
            clip-path: polygon(-41% 0, 50% 91%, 141% 0);
            transform: rotate(180deg) scale(0.8, 1);
        }
        
        .burn {
            position: absolute;
            top: #{$fireSize * 0.75}px;
            left: #{calc($burnSize / -2)}px;
            width: #{$burnSize}px;
            height: #{$burnSize}px;
            background: rgb(var(--background));
            border-radius: 100%;
            
            @for $i from 1 through $burnCount * 2 {
                &.heat:nth-child(#{$i}) {
                    height: #{random(10)}px;
                }
                &:nth-child(#{$i}) {
                    height: #{random(calc($burnSize / 2))}px;
                    margin-left: #{random($fireSize)}px;
                    animation: burning #{random(1000) + 300}ms calc(-3000ms + var(--animationDelay)) infinite linear;
                }
            }
        }
    }

    @keyframes burning {
        0% {
            transform: translateY(0);
        }
        100% {
            transform: translateY(-#{$fireSize}px);
        }
    }
</style>